  _profileController.uploadTask.value == null
                  ? GestureDetector(
                      onTap: () {
                        _profileController
                            .getImage(userID: authController.localUser["uid"])
                            .then((value) {
                          authController.updateRegUserPhoto(
                              _profileController.photoUrl.value);
                        });
                      },
                      child: Container(
                        height: Get.height * 0.24,
                        width: Get.height * 0.24,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: mainColor,
                          image: authController.localUser["photoUrl"] ==
                                      "none" ||
                                  authController.localUser["photoUrl"] == null
                              ? null
                              : DecorationImage(
                                  image: Image.network(
                                          authController.localUser["photoUrl"])
                                      .image,
                                  fit: BoxFit.cover),
                        ),
                        child: authController.localUser["photoUrl"] == "none" ||
                                authController.localUser["photoUrl"] == null
                            ? CircleAvatar(
                                backgroundColor: mainColor,
                                child: Center(
                                  child: Text(
                                    authController.localUser["fullName"][0]
                                        .toString()
                                        .capitalizeFirst,
                                    style: mainStyle(
                                      fontSize: 100,
                                      fontColor: Colors.white,
                                    ),
                                  ),
                                ),
                              )
                            : null,
                      ),
                    )
                  : StreamBuilder(
                      stream:
                          _profileController.uploadTask.value.snapshotEvents,
                      builder: (BuildContext context, AsyncSnapshot snapshot) {
                        Widget indicator;
                        if (snapshot.hasData) {
                          final TaskSnapshot snap = snapshot.data;
                          indicator = CircularProgressIndicator(
                            value: snap.bytesTransferred / snap.totalBytes,
                            valueColor: new AlwaysStoppedAnimation<Color>(
                                isRunningState(snap)
                                    ? sColor3
                                    : Colors.transparent),
                            backgroundColor: isRunningState(snap)
                                ? mainColor
                                : Colors.transparent,
                            strokeWidth: 10,
                          );
                          return Container(
                            height: Get.height * 0.25,
                            width: Get.height * 0.25,
                            child: Stack(
                              alignment: Alignment.center,
                              children: [
                                Container(
                                  height: Get.height * 0.25,
                                  width: Get.height * 0.25,
                                  child: indicator,
                                ),
                                GestureDetector(
                                  child: Container(
                                    height: Get.height * 0.24,
                                    width: Get.height * 0.24,
                                    decoration: BoxDecoration(
                                      shape: BoxShape.circle,
                                      color: mainColor,
                                      image: authController
                                                      .localUser["photoUrl"] ==
                                                  "none" ||
                                              authController
                                                      .localUser["photoUrl"] ==
                                                  null
                                          ? null
                                          : DecorationImage(
                                              image: Image.network(
                                                      authController.localUser[
                                                          "photoUrl"])
                                                  .image,
                                              fit: BoxFit.cover),
                                    ),
                                    child: authController
                                                    .localUser["photoUrl"] ==
                                                "none" ||
                                            authController
                                                    .localUser["photoUrl"] ==
                                                null
                                        ? CircleAvatar(
                                            backgroundColor: mainColor,
                                            child: Center(
                                              child: Text(
                                                authController
                                                    .localUser["fullName"][0]
                                                    .toString()
                                                    .capitalizeFirst,
                                                style: mainStyle(
                                                  fontSize: 100,
                                                  fontColor: Colors.white,
                                                ),
                                              ),
                                            ),
                                          )
                                        : null,
                                  ),
                                  onTap: () {
                                    _profileController
                                        .getImage(
                                            userID:
                                                authController.localUser["uid"])
                                        .then((value) {
                                      authController.updateRegUserPhoto(
                                          _profileController.photoUrl.value);
                                    });
                                  },
                                ),
                              ],
                            ),
                          );
                        } else {
                          indicator = const Text('Starting...');
                          return ListTile(
                            title: indicator,
                          );
                        }
                      },
                    ),